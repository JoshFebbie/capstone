const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const User = require('./models/User');
const bcrypt = require('bcryptjs');
const app = express();
const jwt = require('jsonwebtoken')
const cookieParser = require('cookie-parser');

const salt = bcrypt.genSaltSync(10);
const secret = 'oLFtxrqkbcboJfmG';

app.use(cors({credentials: true, origin: 'http://localhost:3000'}));
app.use(express.json());
app.use(cookieParser());

mongoose.connect("mongodb+srv://blogo:oLFtxrqkbcboJfmG@cluster0.a71rbrz.mongodb.net/?retryWrites=true&w=majority")

//When a new user is registering, userDoc stores the user document created and saved in the MongoDB database. This is done through the User.create() method, which takes an object with username and hashed password as properties. userDoc here is an instance of the User model, and it contains all the information for the newly registered user, including the _id property generated by MongoDB.

//After the user document is created, the userDoc is sent back in the response to the client as JSON. This could be useful if the client needs immediate access to the user's ID or any other data just stored.

app.post('/register', async (req, res) => {
    const { username, password } = req.body;
    try {
        const userDoc = await User.create({
            username, 
            password: bcrypt.hashSync(password, salt)
        });
        res.json(userDoc);
    }catch (err) {
        console.log(err);
        res.status(400).json(err);
    }
});

//userDoc is used to handle the user's data from the MongoDB database. userDoc._id is a unique identifier automatically generated by MongoDB for each document, representing a specific user in this case.


app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const userDoc = await User.findOne({username});
    const passOk = bcrypt.compareSync(password, userDoc.password)
    if (passOk) {
        //user is logged in
        jwt.sign({username, id:userDoc._id}, secret, {}, (err, token) => {
            if (err) throw err;
            res.cookie("token", token).json("Logged in")
        });
        
    } else {
      res.status(400).json('Wrong password');  
    }
});

app.get('/profile', (req, res) => {
    const token = req.cookies.token;
    jwt.verify(token, secret, {}, (err, payload) => {
        if (err) return res.status(401).json(err);
        const {username, id} = payload;
        res.json({username, id});
    });
});


app.listen(4000, () => {
    console.log('Up on port 4000!');
});



// oLFtxrqkbcboJfmG

